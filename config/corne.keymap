#include "keys_de.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip { chain-length = <27>; };

/ {
    behaviors {
        td_shift_caps: td_shift_caps {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SHIFT_CAPS";
            #binding-cells = <0>;
            bindings = <&sk LEFT_SHIFT>, <&caps_word>;

            tapping-term-ms = <300>;
        };

        mm_sharp_s: mm_sharp_s {
            compatible = "zmk,behavior-mod-morph";
            label = "MM_SHARP_S";
            bindings = <&kp DE_SHARP_S>, <&kp DE_CAPITAL_SHARP_S>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            quick-tap-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            require-prior-idle-ms = <150>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            bindings = <
&kp TAB           &kp DE_Q              &kp DE_W                &kp DE_E            &kp DE_R            &kp DE_T     &kp DE_Z       &kp DE_U             &kp DE_I             &kp DE_O                 &kp DE_P                      &kp DE_U_UMLAUT
&td_shift_caps    &hml LEFT_SHIFT DE_A  &hml LEFT_CONTROL DE_S  &hml LEFT_ALT DE_D  &hml LEFT_GUI DE_F  &kp DE_G     &kp DE_H       &hmr RIGHT_GUI DE_J  &hmr RIGHT_ALT DE_K  &hmr RIGHT_CONTROL DE_L  &hmr RIGHT_SHIFT DE_O_UMLAUT  &kp DE_A_UMLAUT
&sk LEFT_CONTROL  &kp DE_Y              &kp DE_X                &kp DE_C            &kp DE_V            &kp DE_B     &kp DE_N       &kp DE_M             &kp DE_COMMA         &kp DE_PERIOD            &kp DE_MINUS                  &mm_sharp_s
                                                                &kp LGUI            &mo 1               &kp SPACE    &kp BACKSPACE  &mo 2                &kp ENTER
            >;
        };

        sym_num {
            bindings = <
&kp ESCAPE  &kp DE_LEFT_PARENTHESIS  &kp DE_RIGHT_PARENTHESIS  &kp DE_LEFT_BRACKET  &kp DE_RIGHT_BRACKET  &kp DE_SINGLE_QUOTE    &kp KP_DIVIDE    &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &none
&trans      &kp DE_EXCLAMATION       &kp DE_DOUBLE_QUOTES      &kp DE_DOLLAR        &kp DE_PERCENT        &kp DE_AMPERSAND       &kp KP_ASTERISK  &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS   &none
&trans      &kp DE_LEFT_BRACE        &kp DE_RIGHT_BRACE        &kp DE_LESS_THAN     &kp DE_GREATER_THAN   &kp DE_QUESTION        &kp KP_DOT       &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp KP_ENTER  &none
                                                               &trans               &trans                &trans                 &kp DELETE       &trans     &kp KP_N0
            >;
        };

        sym2_move {
            bindings = <
&trans  &kp DE_AT    &kp DE_DEGREE    &kp DE_EURO   &kp DE_EQUAL      &kp DE_GRAVE    &none     &kp PAGE_UP    &kp HOME  &none      &none  &none
&trans  &kp DE_HASH  &kp DE_ASTERISK  &kp DE_CARET  &kp DE_SLASH      &kp DE_ACUTE    &kp LEFT  &kp UP         &kp DOWN  &kp RIGHT  &none  &none
&trans  &kp DE_PIPE  &none            &none         &kp DE_BACKSLASH  &kp DE_TILDE    &none     &kp PAGE_DOWN  &kp END   &none      &none  &none
                                      &trans        &trans            &trans          &trans    &trans         &trans
            >;
        };

        control {
            bindings = <
&rgb_ug RGB_TOG    &rgb_ug RGB_EFF  &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI    &none  &kp C_PREVIOUS        &kp C_PLAY_PAUSE  &kp C_NEXT            &none  &none
&ext_power EP_TOG  &out OUT_TOG     &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD    &none  &kp C_VOL_DN          &kp C_MUTE        &kp C_VOL_UP          &none  &none
&bt BT_CLR         &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4       &none  &kp C_BRIGHTNESS_DEC  &none             &kp C_BRIGHTNESS_INC  &none  &none
                                                     &none            &trans           &none              &to 4  &trans                &none
            >;
        };

        gaming {
            bindings = <
&kp ESC   &kp TAB    &kp DE_Q  &kp DE_W  &kp DE_E  &kp DE_R     &none  &kp C_PREVIOUS        &kp C_PLAY_PAUSE  &kp C_NEXT            &none  &none
&kp DE_T  &kp LSHFT  &kp DE_A  &kp DE_S  &kp DE_D  &kp DE_F     &none  &kp C_VOL_DN          &kp C_MUTE        &kp C_VOL_UP          &none  &none
&kp DE_G  &kp LCTRL  &kp DE_Z  &kp DE_X  &kp DE_C  &kp DE_V     &none  &kp C_BRIGHTNESS_DEC  &none             &kp C_BRIGHTNESS_INC  &none  &none
                               &none     &kp LALT  &kp SPACE    &to 0  &none                 &none
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        control {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
